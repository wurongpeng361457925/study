																				RESTFUL风格
RESTFUL:是represontational State Transfer 表现层状态转化
REST几个特点： 
			
				资源      统一接口    URI   无状态

资源：就是网络上的一个实体，网络上一个具体信息。资源要通过某种载体反应其内容，txt,html,xml,JPG, 等等， JSON是常用的资源表示格式
结合我的开发经验，我对资源的理解为：
	以JSON为载体的，面向用户的一组数据集
	* 资源需要序列化和反序列化
	* 常用的资源表示格式  JSON 或者  xml
	* represontational是REST架构的表现层
	
	
统一接口：
	RESTFUL架构风格规定，数据的CRUD操作，分别对应HTTP方法：
			GET：(select)获取资源
			POST: (create)新建（更新）资源
			PUT：(update)更新资源
			DELETE：(delete)删除资源
		这样就统一了数据操作的接口，通过HTTP方法，完成对数据的CRUD操作
		
	
URI:
	用一个URI指向资源，即每隔URI都对应一个特定的资源。   URI就是每个资源的地址或者识别符
	
	
无状态：
		所有的资源，都可以通过URI来定位，且这个定位与其他资源无关，不会因为其他资源的变化而变化。
		如果输入一个URL就可以获取到一个资源，则这种情况是无状态的
		
认证机制：
	因RESTful风格的服务是无状态的，认证机制尤为重要。
	认证机制解决的问题是，确定访问资源的用户是谁；权限机制解决的问题是 确定用户是否许可CRUD对资源的操作
	权限机制通过与服务的业务逻辑绑定，在每隔系统内部制定
	认证机制基本上都是通用的，常用的认证机制包括session auth(用户名和密码)，basic auth, token auth 和 OAuth2.0
	
	OAuth2.0的严谨性和安全性，现在OAuth已经称为RESTful架构风格中最常用的认证机制，和RESTful架构风格一起，称为企业级服务的标配
	
	
	
	
总结：
		* REST + OAuth2 是RESTful      是微服务的标配
		* Basic Auth 只在开发环境中使用
		* 涉及合理的资源
		* 用正确的HTTP方法对资源发正确的请求
		
		
OAuth2的思路：
	OAuth2在 客户端 与服务提供商之间，设置了一层授权层（authorization layer）
	客户端不能直接登陆 服务提供商，只能登陆授权层，以此将用户与客户端区分开来。
	客户端登陆授权层用到的令牌token ，与用户的密码不同。 用户可以在登陆的时候，指定授权层令牌的 权限范围 和 有效期
	
	运行流程：
			1.用户打开客户端后，客户端要求用户给予授权
			2.用户同意给予客户端授权
			3.客户端使用用户给予的授权，向认证服务器申请令牌
			4.认证服务器对客户端进行认证以后，确认无误，同意发放令牌token
			5.客户端使用令牌，向资源服务器申请获取资源
			6.资源服务器确认令牌无误，同意向客户端开放资源
			
			
	关于上面第一步：
			和护短的授权模式，OAuth2定义了四种授权模式：
				* 授权码模式   （功能最完整，流程最严密）
				* 简化模式
				* 密码模式
				* 客户端模式
	
	
	
	
	
