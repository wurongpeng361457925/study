git优势： 
	本地版本控制 重写提交说明
	
分支系统：branch
	
增量  全量
	git是全量 ：每一个版本都包含全部的文件  好处：时刻保持数据的完整性
	svn是增量： 每一个版本只包含修改的文件
	
git的三个区
	(已管理)
	工作区 
		add 到
	暂存区
		commit 到
	对象区
	
git的三种状态
	已修改  --> modified
	已暂存  --> staged
	已提交	--> commited
	
	撤销add  git checkout 撤销add的文件
	add和commit组合--->先add再commit --> git commit -am '注释内容' 
	git add * 添加到暂存区 .gitignore中的忽略文件也会被添加进暂存区(不推荐使用)
		(第一次创建的时候此命令不能使用，之后提交就可以了)
		
	回退到上一次commit --> git reset --hard head^   ^表示一次  ^^表示两次...
	回退到上n次 commit --> git reset --hard head~n  
	回退到指定commit，通过sha1值  --> git reset --hard sha1值
	
	查看git日志所有记录 --> git reflog  ,再通过git reset --hard sha1 进行回退commit  ,需要有良好的日志习惯

git 设置邮箱，账户名  三种方式  global,system,local
		git config --global/system/local user.name "your name"
	1.global:给整个计算机一次性设置
	2.system:给当前用户一次性设置  ~.gitconfig
	3.local:给当前项目一次性设置  .git/config
	可以直接打开文件编辑用户名和email给i他
	优先级：3>2>1  

git 修改对象区内容，文件会重新回到工作区
checkout 命令   -->  撤销对对象区的修改 ,文件再次回到修改前内容，回到对象区 

cached,reset命令 --> 从暂存区回到工作区

删除命令：
	git rm 文件.后缀名  -->删除文件 从对象区到暂存区  ，commit提交删除操作  reset 
		撤销删除命令：1.恢复到工作区 git reset head 文件名.后缀名 
					  2.撤销删除动作 git checkout -- 文件名.后缀名
	
	rm   --> 删除文件， 从对象区到工作区，需要add 删除操作到暂存区，再commit删除操作到对象区
	
注释重写：
	git commit --amend -m '注释内容'   修改的是最近一次的commit注释
	
忽略文件
	.gitignore -->把要忽略提交的文件名添加到.gitignore文件中    默认忽略空目录
	通配符 --> *任意字符   !非  目录名/    demo/**/ -->忽略demo目录下任意级目录  
 
分支branch： 是一个commit链，一条工作记录线
				head：指向当前分支(head->分支名)
				分支名(master)指向当前提交(commit)
				
	查看分支：git branch
		  git branch -a 所有分支      git branch -av 所有分支处于的commit点
	创建分支：git branch 分支名
	切换分支：git checkout 分支名
	创建并切换：git checkout -b 分支名
		切换分支前		
			stash:保存现场
				场景：某个功能未开发完，就需要切换分支，建议 1.先保存当前分支现场 2.切换
				
					1.建议(规范): 在功能没有开发完毕之前，不要commit
					2.规定(必须): [前提：两个分支没有在同一个commit点,若在同一个commit点，则可以切换]
									在没有commit之前，不能checkout切换分支 
									
				保存现场 --> git stash  (保存stash现场后，未add的内容会被隐藏)
				查看现场 --> git stash list
				还原现场 --> git stash pop (默认还原最近一次，pop:还原的现场，并将保存的现场删除，这里pop就是出栈的操作)
											
							 git stash apply(还原内容，不删除原保存的现场  可以手动删除 git stash drop stash{0})
							 可以指定还原某一次现场 --> git stash apply stash@{0}
							 冲突 ---> 保存stash现场未add的内容后，又对保存的未add内容进行修改并commit了，
										会产生冲突
											解决冲突 --> 手动解决冲突
							 
	重命名分支 git branch -m old分支名 new分支名
	删除分支: git branch -d 分支名 不能删除情况 --> 1.自己不能删自己 2.分支包含未合并的内容
				删除分支之前建议先合并分支
	
	合并分支：git merge 分支名
	强行删除分支：git branch -D 分支名
	
快照：每次提交后的所有文件
	包含-->sha1 
	
分支合并与冲突
	若一个分支(dev)考前，另一个分支(master)靠后，在不冲突的前提下，master可以通过merge直接追赶上dev，
	合并之后master同样有dev的提交
	这个追赶的动作称为 fast forward，其本质是指针的移动 ,pull动作也会触发此动作
		1.两个分支在fast forward之后，会归为一处commit
		2.fast forward之后 会丢失分支信息
		
	git在merge时，默认使用fast forward   
	也已禁止使用fast forward 命令-->git merge 要合并的分支名 --no-ff
	
	合并分支时产生冲突：
		解决冲突：git add xxx, git commit -m'xxx'
				got add (告诉git冲突已解决)
				解决冲突后，会进行两次提交，一次是最终提交，一次是将对方的提交commit信息也拿来了
	
checkout: git checkout sha1值   版本穿梭(游离状态)
		1.
tag标签： 标签适用与整个项目的，与分支没关系，在a分支打的标签，其他分支亦可以查看和删除操作
	创建标签  ---> git tag v1.0
				   git tag -v2.0 标签名 -m "名称or注释"
	查看标签  ---> git tag
			模糊查询 ---> git tag -l 'v*'
	删除标签  ---> git tag -d v1.0
	
追责 blame： 查看a.txt的所有提交sha1值，以及每一行的作者(user)
	git blame a.txt   blame：责任
	
差异性：diff  (linux命令)
	diff 比的是文件本身
	diff a.txt b.txt  
	diff -u a.txt b.txt 
		显示结果：
			--- a.txt       2019-10-14 23:07:20.582390900 +0800  // ---a代表第一个文件(原文件) a.txt在某个时间点修改的
			+++ b.txt       2019-10-14 23:08:09.361645200 +0800  // ---b代表第二个文件(对比的文件) b.txt在某个时间点修改的
			@@ -1,3 +1,6 @@ //-代表源文件 1代表从第几行比较，3代表比较3行  +代表对比的文件，6代表比较6行
			 aaaaaa          //
			 bbbbbbb		 //
			 ccccccc		 // 两个文件这里内容一样，不做特殊标注，原样展示
			+dddddd			 //
			+eeeee			 //
			+fff3213		 //站在原文件的角度，加上带加号的内容，和b文件就一致了

	git diff  比较的是区中(工作区，暂存区，对象区)的文件
	
	暂存区 和 工作区 的差异  --> git diff 
	
	对象区 和 工作区 的差异  --> git diff sha1值 
	最新提交的 对象区 和 工作区 的差异 --> git diff head
	
	对象区 和 暂存区 的差异 --> git diff --cached sha1值
	最新提交的 对象区 和 暂存区 的差异 git diff --cached head
	
push:本地->github
pull:GitHub->本地  pull = fetch + merge
push/pull 作用：推送拉取，改变指针(特指origin/master分支)
github仓库中，默认的说明文档README.md



本地推送到远程
	两种推送方式
		https  需要输入用户名or email 和密码
		ssh		本地放私钥  远程放公钥
			ssk-keygen 生成.ssh文件夹 (c盘 用户目录下)
			可以将公钥 存放在两个地方
				1.项目的setting中，当前项目和本机免密钥登陆
				2.账号的setting中，账户的所有项目和本机面密钥登陆
				注意：远程增加ssh时 1.删除公钥中最后的回车 2.可写权限打勾
	1.git remote add origin https://github.com/xxx/xxx.git
		git remote add 添加 标识为origin 的远程地址 (origin代表了仓库地址,origin可以换成其他名称)
	2.git push -u origin master (第一次推送时，加 -u origin master，)
		将本地master 和 远程 origin 关联起来
		
	git remote show origin 展示关联的远程仓库
	git remote show   展示当前项目有几个远程(git是分布式版本控制，远程可以有多个)
	git会在本地维护 origin/master分支，通过该分支，感知远程GitHub的内容
	
	从远程拉项目到本地
		git clone 远程地址 新起项目名  (不写项目名的话默认使用远程仓库的仓库名作为项目名)
	
冲突：
	linux 删除文件中的整行：只读模式下，按两次d
	set number :显示行号    6，9d：删除6到9行
	git pull  = fetch + merge
			fetch:网络没问题都会拉取成功    
			merge：有冲突会merge失败
			<<<<<<<<本地内容
			========分隔符
			>>>>>>>>远程内容
			
	总结： pull ---> vi ---> add ---> commit ---> push
	
查看远程提交日志
git log origin/master
git log remotes/origin/master
git log refs/remotes/origin/master
	其实就是目录路径
			
删除命令： 
	rm -rf * :当前目录中的文件，子文件目录全部删除(不会删除隐藏文件，删除动作不经过回收站)
	rm。。。 -rf / :不要执行，这个是删除整个计算机中的全部文件
md:文本编辑格式  类似 html，xml...
			

			
1.新建文件夹

2.进入文件夹-->右键git bash here，输入git init  会生成.git文件（隐藏文件）

3.配置本地仓库的账号和邮箱 

	git config --global user.name "your name"
	
	git config --global user.email "email@example.com"
	
	查看设置 :git config --list
	
4.将文件添加到暂存区：git add test.txt

5.查看状态：git status

6.将文件添加到仓库:git commit -m'描述信息'

7.将本地仓库与远程仓库关联：git remote add 远程仓库名 url

8.将本地仓库代码提交到远程仓库：git push -u 远程仓库名 url

-----------------------------------------------------------------------------------------

将服务器代码更新到本地

1.查看本地分支文件信息，确保更新时不产生冲突：git status

2.若文件有修改，可还原到出事状态；

  若文件需要更新到服务器上，先merge到服务器，再更新到本地:git checkout --[file name]
	
3.查看当前分支情况：git branch

4.若分支为本地分支，则需切换到服务器的远程分支：git checkout [remote branch]

5.git pull

更新完成


	