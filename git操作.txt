git优势： 
	本地版本控制 重写提交说明
	
分支系统：branch
	
增量  全量
	git是全量 ：每一个版本都包含全部的文件  好处：时刻保持数据的完整性
	svn是增量： 每一个版本只包含修改的文件
	
git的三个区
	(已管理)
	工作区 
		add 到
	暂存区
		commit 到
	对象区
	
git的三种状态
	已修改  --> modified
	已暂存  --> staged
	已提交	--> commited
	
	先add再commit --> git commit -am '注释内容'
	回退到上一次commit --> git reset --hard head^   ^表示一次  ^^表示两次...
	回退到上n次 commit --> git reset --hard head~n  
	回退到指定commit，通过sha1值  --> git reset --hard sha1值
	
	查看git日志所有记录  git reflog

git 设置邮箱，账户名  三种方式  global,system,local
		git config --global/system/local user.name "your name"
	1.global:给整个计算机一次性设置
	2.system:给当前用户一次性设置  ~.gitconfig
	3.local:给当前项目一次性设置  .git/config
	可以直接打开文件编辑用户名和email
	优先级：3>2>1  

git 修改对象区内容，文件会重新回到工作区
checkout 命令   -->  撤销对对象区的修改 ,文件再次回到修改前内容，回到对象区 

cached,reset命令 --> 从暂存区回到工作区

删除命令：
	git rm 文件.后缀名  -->删除文件 从对象区到暂存区  ，commit提交删除操作  reset 
		撤销删除命令：1.恢复到工作区 git reset head 文件名.后缀名 
					  2.撤销删除动作 git checkout -- 文件名.后缀名
	
	rm   --> 删除文件， 从对象区到工作区，需要add 删除操作到暂存区，再commit删除操作到对象区
	
注释重写：
	git commit --amend -m '注释内容'   修改的是最近一次的commit注释
	
忽略文件
	.gitignore -->把要忽略提交的文件名添加到.gitignore文件中    默认忽略空目录
	通配符 --> *任意字符   !非  目录名/    demo/**/ -->忽略demo目录下任意级目录  
 
分支branch： 是一个commit链，一条工作记录线
				head：指向当前分支(head->分支名)
				分支名(master)指向当前提交(commit)
				
	查看分支：git branch
	创建分支：git branch 分支名
	切换分支：git checkout 分支名
	创建并切换：git checkout -b 分支名
	删除分支: git branch -d 分支名 不能删除情况 --> 1.自己不能删自己 2.分支包含未合并的内容
				删除分支之前建议先合并分支
	
	合并分支：git merge 分支名
	强行删除分支：git branch -D 分支名
	
快照：每次提交后的所有文件
	包含-->sha1 
	
分支合并与冲突
	若一个分支(dev)考前，另一个分支靠后，在不冲突的前提下，master可以通过merge直接追赶上dev，合并之后master同样有dev的提交
	这个追赶的动作称为 fast forward，其本质是指针的移动
	1.两个分支在fast forward之后，会归为一处commit
	2.fast forward之后 会丢失分支信息
	
	git在merge时，默认使用fast forward   也已禁止使用fast forward 命令-->git merge --no-ff
	
	
	
1.新建文件夹

2.进入文件夹-->右键git bash here，输入git init  会生成.git文件（隐藏文件）

3.配置本地仓库的账号和邮箱 

	git config --global user.name "your name"
	
	git config --global user.email "email@example.com"
	
	查看设置 :git config --list
	
4.将文件添加到暂存区：git add test.txt

5.查看状态：git status

6.将文件添加到仓库:git commit -m'描述信息'

7.将本地仓库与远程仓库关联：git remote add 远程仓库名 url

8.将本地仓库代码提交到远程仓库：git push -u 远程仓库名 url

-----------------------------------------------------------------------------------------

将服务器代码更新到本地

1.查看本地分支文件信息，确保更新时不产生冲突：git status

2.若文件有修改，可还原到出事状态；

  若文件需要更新到服务器上，先merge到服务器，再更新到本地:git checkout --[file name]
	
3.查看当前分支情况：git branch

4.若分支为本地分支，则需切换到服务器的远程分支：git checkout [remote branch]

5.git pull

更新完成


	