		  SpringCloud
SOA:是面向服务架构
SOAP：简单对象协议  http+xml（或者json）

微服务架构与SOA架构的区别？
	先说SOA架构的缺点：
		1.微服务架构基于SOA架构演变过来的。继承soa架构的优点，在微服务架构中去除soa
		  架构中的ESB消息总线，采用HTTP+JSON进行传输
		2.soa架构依赖于中心化服务发现机制
		3.soa架构采用soap协议（http+xml），xml格式的话就有很多冗余内容，比较占带宽
		  在微服务架构中以json轻量级方式替代xml技术传输
		4.soa架构中数据存储可能会有共享，微服务架构强调每个服务都是单独的数据库，保证
		  每个服务与服务之间互不影响
		5.服务管理混乱，缺少服务管理和治理设施。
		6.微服务架构更适用于互联网公司敏捷开发，快速迭代开发

什么是微服务架构模式？
	微服务架构模式是从soa架构演变而来的。对比soa架构，微服务架构从粒度上来讲更精细，让
专业的人做专业的事情（更加专注），这样也提高了开发的效率。服务之间互不影响，每隔服务要独立部署
（独立的数据库，独立的redis等等），微服务架构更加体现轻量级，采用restful风格提供api （就是http+json）
进行传输，更加轻巧。适用于互联网公司敏捷开发，快速迭代开发。



为什么要用SpringCloud？
	因为springcloud目前来说是一套比较完善的微服务解决框架，不像其他rpc远程调用框架，只是
	解决几个微服务中的问题。可以把springcloud理解为一条龙微服务解决方案，所以springcloud也被
	称为“微服务全家桶”


SpringCloud简介：
	springcloud基于SpringBoot基础之上开发的微服务框架，springcloud是目前非常完整的微服务解决方案的框架
其内容包括：
	服务治理，注册中心，配置管理，断路器，智能路由，微代理，控制总线，全局锁，分布式回话等
	
	SpringCloud包含众多的子项目
		SpringCloud config 分布式配置中心
		SpringCloud netflix 核心组件
			Euraka: 服务治理，注册中心
			Hystrix: 服务保护框架
			Ribbon: 客户端负载均衡器
			Feign : 基于ribbon和hystrix的声明式服务调用组件
			Zuul: 网关组件提供智能路由，访问过滤等功能


SpringCloud支持三种注册中心：
	eureka
	consul （go语言写的）
	zookeeper
	
Dubbo支持的注册中心：
	redis
	zookeeper
			
	
	
